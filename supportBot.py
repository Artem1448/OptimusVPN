from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command 
import asyncio
from datetime import datetime
import re

token = "8007679967:AAHPPuAaIBolbMLinyu0sO1chIwzyAQEOGk"
adminID = 2145885581

bot = Bot(token)
dp = Dispatcher()
 
@dp.message(Command('start'))
async def start(message: types.Message):
    await message.answer(
        text="üÜò –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ –∏ –º—ã —Å—Ä–∞–∑—É –Ω–∞—á–Ω—ë–º –µ—ë —Ä–µ—à–∞—Ç—å!"
    )

@dp.message(lambda message: message.text and message.chat.id != adminID)
async def shareToAdmin(message: types.Message):
    
    senderName = f"{message.chat.first_name} {message.chat.last_name}"
    senderID = message.chat.id
    request = message.text
    time = datetime.now()

    ticket = f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: <b>{senderName}</b>\nID –∫–ª–∏–µ–Ω—Ç–∞: {senderID}\n–í—Ä–µ–º—è: {time}\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n\n{request}"
    
    await bot.send_message(
        chat_id=adminID,
        text=ticket,
        parse_mode="HTML"
    )

@dp.message(
    lambda message: (
        message.reply_to_message and
        message.chat.id == adminID and
        message.reply_to_message.from_user.id == bot.id
    )
)
async def answerToClient(message: types.Message):
    text = message.reply_to_message.text
    needRow = re.search(r'ID –∫–ª–∏–µ–Ω—Ç–∞: (\d+)', text)
    senderID = needRow.group(1)

    await bot.send_message(
        chat_id=senderID,
        text=message.text
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())